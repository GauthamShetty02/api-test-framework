import { chromium, firefox, webkit } from '@playwright/test';
import { Logger } from '../utils/Logger.js';
import { TestConfig } from '../config/TestConfig.js';

export class TestFramework {
  constructor(config) {
    this.browser = null;
    this.context = null;
    this.page = null;
    this.config = new TestConfig(config);
  }

  async setup() {
    try {
      Logger.info('Setting up test framework');
      
      const browserType = this.getBrowserType();
      this.browser = await browserType.launch({
        headless: this.config.headless,
        slowMo: this.config.slowMo
      });

      this.context = await this.browser.newContext({
        viewport: this.config.viewport,
        ignoreHTTPSErrors: true,
        recordVideo: this.config.recordVideo ? { dir: 'videos/' } : undefined
      });

      this.page = await this.context.newPage();
      
      Logger.info('Test framework setup completed');
    } catch (error) {
      Logger.error('Failed to setup test framework', error);
      throw error;
    }
  }

  async teardown() {
    try {
      Logger.info('Tearing down test framework');
      
      if (this.page) await this.page.close();
      if (this.context) await this.context.close();
      if (this.browser) await this.browser.close();
      
      Logger.info('Test framework teardown completed');
    } catch (error) {
      Logger.error('Failed to teardown test framework', error);
      throw error;
    }
  }

  getPage() {
    if (!this.page) {
      throw new Error('Page not initialized. Call setup() first.');
    }
    return this.page;
  }

  getContext() {
    if (!this.context) {
      throw new Error('Context not initialized. Call setup() first.');
    }
    return this.context;
  }

  getBrowser() {
    if (!this.browser) {
      throw new Error('Browser not initialized. Call setup() first.');
    }
    return this.browser;
  }

  getBrowserType() {
    switch (this.config.browserName) {
      case 'firefox':
        return firefox;
      case 'webkit':
        return webkit;
      default:
        return chromium;
    }
  }
}