import { Logger } from '../utils/Logger.js';

export class BasePage {
  constructor(page, url = '') {
    this.page = page;
    this.url = url;
  }

  async navigate() {
    if (!this.url) {
      throw new Error('URL not defined for this page');
    }
    Logger.info(`Navigating to: ${this.url}`);
    await this.page.goto(this.url);
  }

  async waitForPageLoad() {
    await this.page.waitForLoadState('networkidle');
    Logger.info('Page loaded successfully');
  }

  async click(selector) {
    Logger.info(`Clicking element: ${selector}`);
    await this.page.click(selector);
  }

  async fill(selector, text) {
    Logger.info(`Filling element ${selector} with: ${text}`);
    await this.page.fill(selector, text);
  }

  async getText(selector) {
    const text = await this.page.textContent(selector);
    Logger.info(`Got text from ${selector}: ${text}`);
    return text || '';
  }

  async isVisible(selector) {
    const visible = await this.page.isVisible(selector);
    Logger.info(`Element ${selector} visible: ${visible}`);
    return visible;
  }

  async waitForElement(selector, timeout = 30000) {
    Logger.info(`Waiting for element: ${selector}`);
    await this.page.waitForSelector(selector, { timeout });
    return this.page.locator(selector);
  }

  async takeScreenshot(name) {
    const path = `screenshots/${name}-${Date.now()}.png`;
    await this.page.screenshot({ path });
    Logger.info(`Screenshot saved: ${path}`);
  }

  async scrollToElement(selector) {
    Logger.info(`Scrolling to element: ${selector}`);
    await this.page.locator(selector).scrollIntoViewIfNeeded();
  }

  async getTitle() {
    const title = await this.page.title();
    Logger.info(`Page title: ${title}`);
    return title;
  }

  async getCurrentUrl() {
    const url = this.page.url();
    Logger.info(`Current URL: ${url}`);
    return url;
  }
}